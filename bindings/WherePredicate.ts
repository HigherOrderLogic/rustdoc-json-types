// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { GenericBound } from "./GenericBound";
import type { GenericParamDef } from "./GenericParamDef";
import type { Term } from "./Term";
import type { Type } from "./Type";

export type WherePredicate = { "bound_predicate": { type: Type, bounds: Array<GenericBound>, 
/**
 * Used for Higher-Rank Trait Bounds (HRTBs)
 * ```text
 * where for<'a> &'a T: Iterator,"
 *       ^^^^^^^
 *       |
 *       this part
 * ```
 */
generic_params: Array<GenericParamDef>, } } | { "lifetime_predicate": { lifetime: string, outlives: Array<string>, } } | { "eq_predicate": { lhs: Type, rhs: Term, } };
