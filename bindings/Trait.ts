// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { GenericBound } from "./GenericBound";
import type { Generics } from "./Generics";
import type { Id } from "./Id";

/**
 * A `trait` declaration.
 */
export type Trait = { 
/**
 * Whether the trait is marked `auto` and is thus implemented automatically
 * for all applicable types.
 */
is_auto: boolean, 
/**
 * Whether the trait is marked as `unsafe`.
 */
is_unsafe: boolean, 
/**
 * Whether the trait is [dyn compatible](https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility)[^1].
 *
 * [^1]: Formerly known as "object safe".
 */
is_dyn_compatible: boolean, 
/**
 * Associated [`Item`]s that can/must be implemented by the `impl` blocks.
 */
items: Array<Id>, 
/**
 * Information about the type parameters and `where` clauses of the trait.
 */
generics: Generics, 
/**
 * Constraints that must be met by the implementor of the trait.
 */
bounds: Array<GenericBound>, 
/**
 * The implementations of the trait.
 */
implementations: Array<Id>, };
