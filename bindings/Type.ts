// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { DynTrait } from "./DynTrait";
import type { FunctionPointer } from "./FunctionPointer";
import type { GenericArgs } from "./GenericArgs";
import type { GenericBound } from "./GenericBound";
import type { Path } from "./Path";

export type Type = { "resolved_path": Path } | { "dyn_trait": DynTrait } | { "generic": string } | { "primitive": string } | { "function_pointer": FunctionPointer } | { "tuple": Array<Type> } | { "slice": Type } | { "array": { type: Type, len: string, } } | { "pat": { type: Type, __pat_unstable_do_not_use: string, } } | { "impl_trait": Array<GenericBound> } | "infer" | { "raw_pointer": { mutable: boolean, type: Type, } } | { "borrowed_ref": { lifetime: string | null, mutable: boolean, type: Type, } } | { "qualified_path": { name: string, args: GenericArgs, self_type: Type, 
/**
 * `None` iff this is an *inherent* associated type.
 */
trait: Path | null, } };
