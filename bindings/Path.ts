// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { GenericArgs } from "./GenericArgs";
import type { Id } from "./Id";

/**
 * A type that has a simple path to it. This is the kind of type of structs, unions, enums, etc.
 */
export type Path = { 
/**
 * The path of the type.
 *
 * This will be the path that is *used* (not where it is defined), so
 * multiple `Path`s may have different values for this field even if
 * they all refer to the same item. e.g.
 *
 * ```rust
 * pub type Vec1 = std::vec::Vec<i32>; // path: "std::vec::Vec"
 * pub type Vec2 = Vec<i32>; // path: "Vec"
 * pub type Vec3 = std::prelude::v1::Vec<i32>; // path: "std::prelude::v1::Vec"
 * ```
 */
path: string, 
/**
 * The ID of the type.
 */
id: Id, 
/**
 * Generic arguments to the type.
 *
 * ```ignore (incomplete expression)
 * std::borrow::Cow<'static, str>
 * //              ^^^^^^^^^^^^^^
 * ```
 */
args: GenericArgs | null, };
