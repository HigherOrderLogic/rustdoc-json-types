// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { GenericArgs } from "./GenericArgs";
import type { Id } from "./Id";

/**
 * A type that has a simple path to it. This is the kind of type of structs, unions, enums, etc.
 */
export type Path = { 
/**
 * The name of the type as declared, e.g. in
 *
 * ```rust
 * mod foo {
 *     struct Bar;
 * }
 * ```
 *
 * for `foo::Bar`, this field will be `Bar`.
 */
name: string, 
/**
 * The ID of the type.
 */
id: Id, 
/**
 * Generic arguments to the type.
 *
 * ```ignore (incomplete expression)
 * std::borrow::Cow<'static, str>
 * //              ^^^^^^^^^^^^^^
 * ```
 */
args: GenericArgs | null, };
