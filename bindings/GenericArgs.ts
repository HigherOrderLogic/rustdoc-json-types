// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { AssocItemConstraint } from "./AssocItemConstraint";
import type { GenericArg } from "./GenericArg";
import type { Type } from "./Type";

/**
 * A set of generic arguments provided to a path segment, e.g.
 *
 * ```text
 * std::option::Option::<u32>::None
 *                      ^^^^^
 * ```
 */
export type GenericArgs = { "angle_bracketed": { 
/**
 * The list of each argument on this type.
 * ```text
 * <'a, 32, B: Copy, C = u32>
 *  ^^^^^^
 * ```
 */
args: Array<GenericArg>, 
/**
 * Associated type or constant bindings (e.g. `Item=i32` or `Item: Clone`) for this type.
 */
constraints: Array<AssocItemConstraint>, } } | { "parenthesized": { 
/**
 * The input types, enclosed in parentheses.
 */
inputs: Array<Type>, 
/**
 * The output type provided after the `->`, if present.
 */
output: Type | null, } };
